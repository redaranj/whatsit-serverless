---
service: whatsit-serverless

package:
  exclude:
    - ./**
  include:
    - ./bin/**

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or falls back to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  environment: ${file(env.yml):${self:custom.stage}, file(env.yml):default}

provider:
  name: aws
  runtime: go1.x
  stage: development
  region: us-east-1

  environment:
    SESSION_SECRETS_MANAGER_PREFIX: ${self:custom.environment.sessionSecretsManagerPrefix}
    SECRET_SECRETS_MANAGER_PREFIX: ${self:custom.environment.secretSecretsManagerPrefix}
    API_KEY_SECRETS_MANAGER_KEY: ${self:custom.environment.apiKeySecretsManagerKey}
    SENDER_EMAIL_ADDRESS: ${self:custom.environment.senderEmailAddress}
    KMS_KEY_ARN: ${self:custom.environment.kmsKeyArn}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - secretsmanager:GetRandomPassword
      Resource: '*'
    - Effect: Allow
      Action:
        - secretsmanager:GetSecretValue
        - secretsmanager:CreateSecret
        - secretsmanager:UpdateSecret
        - secretsmanager:DeleteSecret
      Resource:
        - 'arn:aws:secretsmanager:${self:provider.region}:#{AWS::AccountId}:secret:${self:custom.environment.sessionSecretsManagerPrefix}*'
        - 'arn:aws:secretsmanager:${self:provider.region}:#{AWS::AccountId}:secret:${self:custom.environment.secretSecretsManagerPrefix}*'
    - Effect: Allow
      Action:
        - secretsmanager:GetSecretValue
      Resource: 'arn:aws:secretsmanager:${self:provider.region}:#{AWS::AccountId}:secret:${self:custom.environment.apiKeySecretsManagerKey}*'
    - Effect: Allow
      Action:
        - kms:GenerateDataKey
        - kms:Decrypt
      Resource:
        - ${self:custom.environment.kmsKeyArn}
    - Effect: Allow
      Action:
        - ses:SendRawEmail
      Resource:
       - "*"

functions:
  register:
    handler: bin/register
    timeout: 30
    events:
      - http:
          path: register
          method: POST
          cors: true

  verify:
    handler: bin/verify
    timeout: 15
    events:
      - http:
          path: verify
          method: POST
          cors: true

  delete:
    handler: bin/delete
    timeout: 15
    events:
      - http:
          path: delete
          method: POST
          cors: true

  alert:
    handler: bin/alert
    timeout: 15
    events:
      - http:
          path: alert
          method: POST
          cors: true

plugins:
  - serverless-pseudo-parameters
